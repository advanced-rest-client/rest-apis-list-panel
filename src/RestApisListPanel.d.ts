/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   src/RestApisListPanel.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {LitElement, html, css} from 'lit-element';

export {RestApisListPanel};

declare namespace UiElements {

  /**
   * REST APIs project list screen
   *
   * This element requires `arc-models/rest-api-model` element to be present in the
   * DOM as this element does not connect to the datastore directly.
   * The `arc-models/rest-api-model` element can be replaced by any element that
   * supports the same event's API.
   *
   * ### Example
   *
   * ```html
   * <rest-apis-list-panel></rest-apis-list-panel>
   * <rest-api-model></rest-api-model>
   * ```
   *
   * ### Styling
   *
   * `<rest-apis-list-panel>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--warning-primary-color` | Main color of the warning messages | `#FF7043`
   * `--warning-contrast-color` | Contrast color for the warning color | `#fff`
   */
  class RestApisListPanel extends LitElement {

    /**
     * Computed value. `true` if the `items` property has values.
     */
    readonly hasItems: Boolean|null;

    /**
     * Computed value. True if query ended and there's no results.
     */
    readonly dataUnavailable: Boolean|null;
    readonly listHidden: Boolean|null;
    readonly modelTemplate: any;
    readonly apiModel: any;

    /**
     * Saved items restored from the datastore.
     */
    items: any[]|null|undefined;

    /**
     * True when the element is querying the database for the data.
     */
    querying: boolean|null|undefined;

    /**
     * Page token for datastore pagination.
     */
    nextPageToken: string|null|undefined;

    /**
     * Search query for the list.
     */
    query: string|null|undefined;

    /**
     * If set it renders the "Explore APIs" button
     */
    renderExplore: boolean|null|undefined;

    /**
     * When set the element won't query for APIs data when connected to the DOM.
     * In this case manually call `makeQuery()`
     */
    noAutoQuery: boolean|null|undefined;
    isSearch: boolean|null|undefined;

    /**
     * Enables compatibility with Anypoint platform
     */
    compatibility: boolean|null|undefined;

    /**
     * Enables outlined input theme
     */
    outlined: boolean|null|undefined;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    firstUpdated(): void;
    render(): any;

    /**
     * Handler for `data-imported` cutom event.
     * Refreshes data state.
     */
    _dataImportHandler(): void;

    /**
     * Resets the state of the variables.
     */
    reset(): void;

    /**
     * Resets the state after finishing search. It restors previous items
     * without changing query options.
     */
    _resetSearch(): void;

    /**
     * Refreshes the data from the datastore.
     * It resets the query options, clears items and makes a query to the datastore.
     */
    refresh(): void;

    /**
     * Handler for the `datastore-destroyed` custom event
     */
    _onDatabaseDestroy(e: any): void;

    /**
     * The function to call when new query for data is needed.
     * Use this intead of `loadPage()` as this function uses debouncer to
     * prevent multiple calls at once.
     */
    makeQuery(): void;
    _getApiListOptions(): any;

    /**
     * Performs the query and processes the result.
     * This function immediately queries the data model for data.
     * It does this in a loop until all data are read.
     */
    loadPage(): Promise<any>|null;

    /**
     * Sorts projects list by `order` and the `title` properties.
     */
    _sortData(a: object|null, b: object|null): Number|null;

    /**
     * Handler for the `click` event on the list item.
     */
    _openAPI(e: any): void;

    /**
     * Handler for the `api-index-changed` custom event.
     * Only handles the change if the event is non-cancelable.
     */
    _indexUpdated(e: CustomEvent|null): void;

    /**
     * Updates a list item when the search is on.
     *
     * @param item An item to update.
     */
    _indexUpdatedSearch(item: object|null): void;

    /**
     * Handler for the `api-deleted` custom event.
     */
    _indexDeleted(e: CustomEvent|null): void;

    /**
     * Handles delete event when search is on.
     * Updates bothe `items` and `_beforeQueryItems` lists if removed item is on
     * any of those lists.
     *
     * @param id The ID of deleted item.
     */
    _indexDeletedSearch(id: String|null): void;
    updateSearch(): void;

    /**
     * Performs the search
     *
     * @param query An item to search for
     */
    queryItems(query: String|null): void;

    /**
     * Prepares the user query to be used in the datasore simple search.
     *
     * @param query User query
     * @returns Transformed query
     */
    _prepareQuery(query: String|null): String|null;
    _deleteHandler(e: any): any;

    /**
     * Dispatches cancelable `api-deleted` event for the model to delete
     * the entry.
     *
     * This requires `arc-models/rest-api-model` element to be present in the
     * DOM.
     */
    _deleteItem(id: String|null): Promise<any>|null;

    /**
     * Dispatches `navigate` event to open Exchange explorer.
     */
    _openExplore(): void;
    _queryHandler(e: any): void;
    _searchHandler(): void;
    _headerTemplate(): any;
    _busyTemplate(): any;
    _unavailableTemplate(): any;
    _listTemplate(): any;
    _itemTemplate(item: any, index: any): any;
  }
}
