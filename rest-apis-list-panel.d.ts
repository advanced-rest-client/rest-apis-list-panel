/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   rest-apis-list-panel.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../polymer/types/lib/utils/render-status.d.ts" />
/// <reference path="../paper-toast/paper-toast.d.ts" />
/// <reference path="../paper-progress/paper-progress.d.ts" />
/// <reference path="../arc-icons/arc-icons.d.ts" />
/// <reference path="../paper-icon-button/paper-icon-button.d.ts" />
/// <reference path="../paper-input/paper-input.d.ts" />
/// <reference path="../iron-flex-layout/iron-flex-layout.d.ts" />
/// <reference path="../paper-button/paper-button.d.ts" />
/// <reference path="rest-apis-list-item.d.ts" />

declare namespace UiElements {

  /**
   * REST APIs project list screen
   *
   * This element requires `arc-models/rest-api-model` element to be present in the
   * DOM as this element does not connect to the datastore directly.
   * The `arc-models/rest-api-model` element can be replaced by any element that
   * supports the same event's API.
   *
   * ### Example
   *
   * ```html
   * <link rel="import" href="../rest-apis-list-panel/rest-apis-list-panel.html">
   * <link rel="import" href="../arc-models/rest-api-model.html">
   *
   * <rest-apis-list-panel></rest-apis-list-panel>
   * <rest-api-model></rest-api-model>
   * ```
   *
   * ### Styling
   *
   * `<rest-apis-list-panel>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--rest-apis-list-panel` | Mixin applied to the element | `{}`
   * `--rest-apis-list-panel-loader` | Mixin applied to the paper-progress element | `{}`
   * `--arc-font-headline` | Mixin applied to the header | `{}`
   * `--arc-font-subhead` | Mixin applied to the subheader | `{}`
   * `--warning-primary-color` | Main color of the warning messages | `#FF7043`
   * `--warning-contrast-color` | Contrast color for the warning color | `#fff`
   * `--error-toast` | Mixin applied to the error toast | `{}`
   * `--empty-info` | Mixin applied to the label rendered when no data is available. | `{}`
   */
  class RestApisListPanel extends Polymer.Element {

    /**
     * Saved items restored from the datastore.
     */
    items: any[]|null|undefined;

    /**
     * True when the element is querying the database for the data.
     */
    readonly querying: boolean|null|undefined;

    /**
     * Computed value, true if the `items` property has values.
     */
    readonly hasItems: boolean|null|undefined;

    /**
     * Computed value. True if query ended and there's no results.
     */
    readonly dataUnavailable: boolean|null|undefined;

    /**
     * Page token for datastore pagination.
     */
    nextPageToken: string|null|undefined;

    /**
     * Search query for the list.
     */
    query: string|null|undefined;

    /**
     * If true, the element will not produce a ripple effect when interacted
     * with via the pointer.
     */
    noink: boolean|null|undefined;

    /**
     * Computed value, true if the requests lists is hidden.
     */
    readonly listHidden: boolean|null|undefined;

    /**
     * If set it renders the "Explore APIs" button
     */
    renderExplore: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Resets the state of the variables.
     */
    reset(): void;

    /**
     * Resets the state after finishing search. It restors previous items
     * without changing query options.
     */
    _resetSearch(): void;

    /**
     * Refreshes the data from the datastore.
     * It resets the query options, clears items and makes a query to the datastore.
     */
    refresh(): void;
    _requery(): void;

    /**
     * Handler for the `datastore-destroyed` custom event
     */
    _onDatabaseDestroy(e: any): void;

    /**
     * Computes value for the `hasItems` property.
     *
     * @param length Current size of items
     */
    _computeHasItems(length: Number|null): Boolean|null;

    /**
     * The function to call when new query for data is needed.
     */
    makeQuery(): void;

    /**
     * Performs the query and processes the result.
     */
    _loadPage(): Promise<any>|null;

    /**
     * Sorts projects list by `order` and the `title` properties.
     */
    _sortData(a: object|null, b: object|null): Number|null;

    /**
     * Computes value for the `dataUnavailable` property.
     *
     * @param hasItems Current value of `hasItems`
     * @param querying Current value of `querying`
     */
    _computeDataUnavailable(hasItems: Boolean|null, querying: Boolean|null): Boolean|null;

    /**
     * Handler for the `api-index-changed` custom event.
     * Only handles the change if the event is non-cancelable.
     */
    _indexUpdated(e: CustomEvent|null): void;

    /**
     * Updates a list item when the search is on.
     *
     * @param item An item to update.
     */
    _indexUpdatedSearch(item: object|null): void;

    /**
     * Handler for the `api-deleted` custom event.
     */
    _indexDeleted(e: CustomEvent|null): void;

    /**
     * Handles delete event when search is on.
     * Updates bothe `items` and `_beforeQueryItems` lists if removed item is on
     * any of those lists.
     *
     * @param id The ID of deleted item.
     */
    _indexDeletedSearch(id: String|null): void;
    updateSearch(): void;

    /**
     * Performs the search
     *
     * @param query An item to search for
     */
    queryItems(query: String|null): void;

    /**
     * Prepares the user query to be used in the datasore simple search.
     *
     * @param query User query
     * @returns Transformed query
     */
    _prepareQuery(query: String|null): String|null;

    /**
     * Sends `navigate` event so the application can handle navigation to the
     * API project.
     */
    _navigateItem(e: CustomEvent|null): void;

    /**
     * Dispatches cancelable `api-deleted` event for the model to delete
     * the entry.
     *
     * This requires `arc-models/rest-api-model` element to be present in the
     * DOM.
     */
    _deleteItem(e: CustomEvent|null): void;

    /**
     * Computes value of the `listHidden` property.
     * List is hidden when no items are found and it is not searching.
     */
    _computeListHidden(hasItems: Boolean|null, isSearch: Boolean|null): Boolean|null;

    /**
     * Dispatches `navigate` event to open Exchange explorer.
     */
    _openExplore(): void;
  }
}

interface HTMLElementTagNameMap {
  "rest-apis-list-panel": UiElements.RestApisListPanel;
}
